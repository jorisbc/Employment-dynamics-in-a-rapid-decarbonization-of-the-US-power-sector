df2.agg
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = list('years', 'scenario'))
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
dfmerge
df <- cbind.data.frame(dfmerge[,1,2], capacity = dfmerge$capacity1+dfmerge$capacity2)
df
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
df
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line() +
facet_wrap('Dim2', scales = 'free_y') +
theme(
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
) +
ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line() +
theme(
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
) +
ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 2) +
theme(
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
) +
ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
theme(
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
) +
ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black')
) + xlab('') + ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank()
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') )# +
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') )# +
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') )# +
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('TW-mi')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('TW-mi')
rm(list=ls())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv","tran_mi_out_95by2035.csv",  "tran_mi_out_95by2050.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2035.csv", "tran_out_midcase95by2050.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('TW-mi')
rm(list=ls())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv","tran_mi_out_95by2035.csv",  "tran_mi_out_95by2050.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2035.csv", "tran_out_midcase95by2050.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('Transmission lines (TW-mi)')
rm(list=ls())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv",  "tran_mi_out_95by2050.csv", "tran_mi_out_95by2035.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2050.csv", "tran_out_midcase95by2035.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('Transmission lines (TW-mi)')
rm(list=ls())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv",  "tran_mi_out_95by2050.csv", "tran_mi_out_95by2035.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2050.csv", "tran_out_midcase95by2035.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
write.csv(df, 'data_out/transmission_capacity.csv')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('Transmission lines (TW-mi)')
rm(list=ls())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv",  "tran_mi_out_95by2050.csv", "tran_mi_out_95by2035.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2050.csv", "tran_out_midcase95by2035.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
write.csv(df, 'data_out/transmission_capacity.csv')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('Transmission lines (TW-mi)')
library(ggplot2); theme_set(theme_bw())
rm(list=ls())
library(ggplot2); theme_set(theme_bw())
# take the 3 relevant scenarios
# data distinguishes intra- and inter-regional lines
allcsvs <- c("tran_mi_out_midcase.csv",  "tran_mi_out_95by2050.csv", "tran_mi_out_95by2035.csv",
"tran_out_midcase.csv", "tran_out_midcase95by2050.csv", "tran_out_midcase95by2035.csv" )
scenarios <- c('Reference', '95% by 2050', '95% by 2035')
scenario.df <- data.frame(files =allcsvs, scenarios = rep(scenarios,2))
filelist <- list()
for (i in 1:length(allcsvs)) {
filelist[[i]] <- read.csv(paste0('data_other/transmission data/', scenario.df[i,1]) )
filelist[[i]]$scenario <- scenario.df[i,2]
}
df1 <- do.call(rbind, filelist[1:3]) # within region transmission lines
df2 <- do.call(rbind, filelist[4:6]) # across region transmission lines
# aggregate data
df1.agg <- aggregate( data.frame(capacity1=df1$Val), by = list(years=df1$Dim1, scenario = df1$scenario), sum ) # sum DC and AC,
df2.agg <- aggregate( data.frame(capacity2=df2$Val), by = list(years=df2$Dim3, scenario = df2$scenario), sum ) # sum DC and AC, also sum all p's
dfmerge <- merge(df1.agg, df2.agg, by = c('years', 'scenario'))
df <- cbind.data.frame(dfmerge[,c(1,2)], capacity = dfmerge$capacity1+dfmerge$capacity2)
write.csv(df, 'data_out/transmission_capacity.csv')
ggplot(df, aes(x=years, y=capacity/10^6, color= scenario)) +
geom_line(size = 1.25) +
guides(color = guide_legend(reverse=TRUE), fill = guide_legend(reverse = T)) +
theme(
axis.title = element_text(size = 22),
axis.text.x = element_text(size = 20, hjust = 0.6),
axis.text.y = element_text(size = 22),
axis.ticks.length.x = unit(.3,'cm'),
legend.text = element_text(size = 22),
legend.title = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(1,"cm"),
legend.position = c(0,1),
legend.justification = c(0,1),
panel.spacing = unit(6, "mm"),
strip.background = element_rect(fill = 'white', color = 'grey'),
strip.text = element_text(size = 22, color = 'black') ) +
xlab('') + ylab('Transmission lines (TW-mi)')
df
rm(list=ls())
library(readxl)
library(reshape2)
library(ggplot2) ; theme_set(theme_bw())
years <- 2019:2050
#### FUEL COSTS FOR GAS AND COAL ----------------------------------------------
# no fuel costs for gas and coal given in ATB 2021
# GAS FUEL given in $/MMBTU
## Heat rate gas [MMBtu/Mwh]: ATB 2020
mmbtu.factor.Gas.CT <- 9.51
mmbtu.factor.Gas.CC	<- 6.40
mmbtu.factor.Gas.CC.CCS <-	7.53
# use 2020 data for fuels on GAS and COAL (not in 2021 version yet)
dd <- read.csv("D:/Science/data_other/energy/NREL_ATB/ATBe_2020.csv")
# coal fuel costs
d.coal.20 <- dd[dd$technology == 'Coal' &
dd$techdetail == "newAvgCF" &                 # no CSS or IGCC assumption
dd$core_metric_variable %in% years &
dd$scenario == 'Moderate' &
dd$crpyears == 20 &                           # no difference across capex, opex and fuel
dd$core_metric_case == 'R&D',                 # cost changes only come from R&D (not from policy)
]
coal.fuel <- d.coal.20[ d.coal.20$core_metric_parameter == 'Fuel', 'value'] # COAL fuel correctly given $/MWh
names(coal.fuel) <- d.coal.20[ d.coal.20$core_metric_parameter == 'Fuel', 'core_metric_variable']
# gas fuel costs (we distinguish different gas types)
d.gas.20 <- dd[dd$technology == 'NaturalGas' &
dd$core_metric_variable %in% years &
dd$scenario == 'Moderate' &
dd$crpyears == 20 &                           # no difference across capex, opex and fuel
dd$core_metric_case == 'R&D',                 # cost changes only come from R&D (not from policy)
]
# combined cycle
gasCC.fuel <- d.gas.20[d.gas.20$techdetail == "CCAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'value'] * mmbtu.factor.Gas.CC
names(gasCC.fuel) <- d.gas.20[d.gas.20$techdetail == "CCAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'core_metric_variable']
# combined cycle plus carbon capture
gasCCCCS.fuel <- d.gas.20[d.gas.20$techdetail == "CCCCSAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'value'] * mmbtu.factor.Gas.CC.CCS
names(gasCCCCS.fuel) <- d.gas.20[d.gas.20$techdetail == "CCCCSAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'core_metric_variable']
# combustion turbine
gasCT.fuel <- d.gas.20[d.gas.20$techdetail == "CTAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'value'] * mmbtu.factor.Gas.CT
names(gasCT.fuel) <- d.gas.20[d.gas.20$techdetail == "CTAvgCF" & d.gas.20$core_metric_parameter == 'Fuel', 'core_metric_variable']
cbind.data.frame(coal.fuel, gasCC.fuel, gasCT.fuel, gasCCCCS.fuel)
# use 2021 data for all other technologies
cost.factors <- c("CAPEX", "Fixed O&M", "Variable O&M", "Fuel")
d <- read.csv("D:/Science/data_other/energy/NREL_ATB/ATBe_2021.csv")
d <- d[,-c(1,2,3,14)]
d <- d[d$technology != "AEO",]
d <- d[d$scenario != "*",]
d <- d[d$techdetail != '*',]
d <- d[d$core_metric_case == 'R&D',]
d <- d[d$core_metric_parameter %in% cost.factors, ]
d <- d[d$core_metric_variable %in% years, ]
d <- d[,c('technology', 'techdetail', 'core_metric_variable', 'scenario', 'crpyears', 'core_metric_case', 'core_metric_parameter', 'units', "value")]
colnames(d)[3] <- 'years'
rownames(d) <- NULL
technologies_1 <- c( "Biopower", "CSP","Coal_FE",
"CommPV", "Geothermal", "Hydropower", "LandbasedWind",
"NaturalGas_FE", "OffShoreWind", "Pumped Storage Hydropower",
"ResPV", "Utility-Scale Battery Storage", "UtilityPV",
"Nuclear")
battery.l <- d[d$technology == 'Utility-Scale Battery Storage' & d$techdetail == "4Hr Battery Storage" & d$scenario == 'Moderate' & d$crpyears == 30,]
battery <- dcast(dat = battery.l, formula = years ~ core_metric_parameter, value.var = 'value')
bio.l <- d[d$technology == 'Biopower' & d$scenario == 'Moderate' & d$crpyears == 30,]
bio <- dcast(dat = bio.l, formula = years ~ core_metric_parameter, value.var = 'value')
coal.l <- d[d$technology == 'Coal_FE' & d$techdetail == "newAvgCF" & d$scenario == 'Moderate' & d$crpyears == 30,]
coal <- dcast(dat = coal.l, formula = years ~ core_metric_parameter, value.var = 'value')
csp.l <- d[d$technology == 'CSP' & d$techdetail == "Class3" & d$scenario == 'Moderate' & d$crpyears == 30,]
csp <- dcast(dat = csp.l, formula = years ~ core_metric_parameter, value.var = 'value')
pvcomm.l <- d[d$technology == 'CommPV' & d$techdetail == "Class5" & d$scenario == 'Moderate' & d$crpyears == 30,]
pvcomm <- dcast(dat = pvcomm.l, formula = years ~ core_metric_parameter, value.var = 'value')
pvres.l <- d[d$technology == 'ResPV' & d$techdetail == "Class5" & d$scenario == 'Moderate' & d$crpyears == 30,]
pvres <- dcast(dat = pvres.l, formula = years ~ core_metric_parameter, value.var = 'value')
# assume given empirical split (EIA EPA Table 6.1.B.):
# Residential PV: 21022.1 MW (2021)
# Total small scale (residential + commercial + industrial): 32972.3 MW (2021)
res.share <- 21022.1/32972.3
pvdist <- cbind.data.frame(years = pvcomm$years, pvcomm[,-1] * (1-res.share) + pvres[,-1] * res.share )
pvutil.l <- d[d$technology == 'UtilityPV' & d$techdetail == "Class5" & d$scenario == 'Moderate' & d$crpyears == 30,]
pvutil <- dcast(dat = pvutil.l, formula = years ~ core_metric_parameter, value.var = 'value')
gasct.l <- d[d$technology == 'NaturalGas_FE' &  d$techdetail == 'CTAvgCF' & d$scenario == 'Moderate' & d$crpyears == 30,]
gasct <- dcast(dat = gasct.l, formula = years ~ core_metric_parameter, value.var = 'value')
gascc.l <- d[d$technology == 'NaturalGas_FE' &  d$techdetail == 'CCAvgCF' & d$scenario == 'Moderate' & d$crpyears == 30,]
gascc <- dcast(dat = gascc.l, formula = years ~ core_metric_parameter, value.var = 'value')
gasccccs.l <- d[d$technology == 'NaturalGas_FE' &  d$techdetail == 'CCCCSAvgCF' & d$scenario == 'Moderate' & d$crpyears == 30,]
gasccccs <- dcast(dat = gasccccs.l, formula = years ~ core_metric_parameter, value.var = 'value')
hydro.l <- d[d$technology == 'Hydropower' &  d$techdetail == 'NPD1' & d$scenario == 'Moderate' & d$crpyears == 30,]
hydro <- dcast(dat = hydro.l, formula = years ~ core_metric_parameter, value.var = 'value')
phs.l <- d[d$technology == "Pumped Storage Hydropower" &  d$techdetail == 'Class 3' & d$scenario == 'Moderate' & d$crpyears == 30,]
phs <- dcast(dat = phs.l, formula = years ~ core_metric_parameter, value.var = 'value')
windon.l <- d[d$technology == "LandbasedWind" & d$techdetail == 'Class4' & d$scenario == 'Moderate' & d$crpyears == 30,]
windon <- dcast(dat = windon.l, formula = years ~ core_metric_parameter, value.var = 'value')
windoff.l <- d[d$technology == "OffShoreWind" & d$techdetail == 'Class3' & d$scenario == 'Moderate' & d$crpyears == 30,]
windoff <- dcast(dat = windoff.l, formula = years ~ core_metric_parameter, value.var = 'value')
geo.l <- d[d$technology == "Geothermal" & d$techdetail == 'HydroFlash' & d$scenario == 'Moderate' & d$crpyears == 30,]
geo <- dcast(dat = geo.l, formula = years ~ core_metric_parameter, value.var = 'value')
nuclear.l <- d[d$technology == "Nuclear" & d$techdetail == 'Nuclear' & d$scenario == 'Moderate' & d$crpyears == 30,]
nuclear <- dcast(dat = nuclear.l, formula = years ~ core_metric_parameter, value.var = 'value')
gasct
gasCC.fuel
pvutil
nuclear
gascc
